import random
import sys
from getopt import GetoptError, getopt

import read
import files
import graph
import alg
import output
import rna
from rna import Gene
from graph import Graph
from alg import Phase

DASE_ONLY = False
PLOIDY = 2

# Default: [NE RADI NA SEQu]
# PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR, *RNA_PARAMS = \
    # [0.001, 0.7, 0.02, 2.0, 0.2, 0.6, 0.0, 2.0, 0.001, 0.2]

# Better
PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR, RNA_PARAMS = \
    0.001, 0.8, 0.01, [2.0, 0.2, 0.7, 0.0, 2.0, 0.001, 0.2]

def parse_args(argv: list[str]):
    global PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR
    try:
        opts, args = getopt(
            argv, 
            "hv:d:r:g:i:o:dp:z:",
            [
                "help", 
                "vcf=", 
                "dna=", 
                "rna=", 
                "gene=", 
                "isoform=", 
                "out=",
                "only-dase",
                "ploidy",
                "phase-threshold",
                "pair-threshold",
                "phase-error",
                "z="
            ]
        )
        vcf, dna, rna, gene, isoforms, output = "", "", "", "", "", ""
        for o, a in opts:
            if o in ["-h", "--help"]: sys.exit(0)
            elif o in ['-v', '--vcf']: vcf = a
            elif o in ['-d', '--dna']: dna = a
            elif o in ['-r', '--rna']: rna = a
            elif o in ['-g', '--gene']: gene = a
            elif o in ['-i', '--isoform']: isoforms = a
            elif o in ['-z', '--z']: Z = a
            elif o in ['-o', '--out']: output = a
            elif o in ['-d', '--only-dase']: DASE_ONLY = True
            elif o in ['-p', '--ploidy']: ploidy = int(a)
            elif o == "--phase-threshold": PHASE_THRESHOLD = float(a)
            elif o == "--pair-threshold": PAIR_THRESHOLD = float(a)
            elif o == "--phase-error": PHASE_ERROR = float(a)
            else: assert False, f"unhandled option {o}"
        return vcf, dna, rna, gene, output, isoforms
    except GetoptError as err:
        raise ValueError(err.message)

A = array[tuple[Graph, dict[int, Phase]]](100)
def parse_chromosome(chri, vcf, dna, rna, genes, isoforms):
    global A, RNA_PARAMS
    chr_i, chr = chri
    r_ = files.load_rna_data(vcf, chr, genes, [rna], isoforms, RNA_PARAMS)
    g_ = files.load_dna_data(vcf, chr, [(dna, 1000)], PLOIDY)
    return

    # g: graph.Graph = None
    # if not genes or rna == "":
    #     dnas = list[tuple[str, int]]()
    #     if dna: dnas.append((dna, 1000)) 
    #     if rna: dnas.append((rna, -1))
    #     g = files.load_dna_data(vcf, chr, dnas, PLOIDY)
    # else:
    #     r = files.load_rna_data(vcf, chr, genes, [rna], isoforms, RNA_PARAMS)
    #     if not dna:
    #         g = graph.Graph(r.multi_reads if not DASE_ONLY else list[read.Read](), r.ploidy)
    #     else:
    #         g = files.load_dna_data(vcf, chr, [(dna, 1000)], PLOIDY, r.multi_reads)
    #     g.integrate_rna(r)
    # phases = alg.phase(g, PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR)
    # A[chr_i] = g, phases    

def main(argv: list[str]):
    global A
    print('HapTree-X v2.0 [with Seq v0.9]')
    random.seed(51)

    vcf_path, dna, rna, gtf, out, isoforms = parse_args(argv)

    print(f"Loading VCF file {vcf_path}...")
    if not vcf_path:
        raise ValueError("Error: VCF file required")
    if not out:
        raise ValueError("Error: output file required")
    vcf = files.parse_vcf(vcf_path)
    print(f"{len(vcf.snps)} SNPs in VCF file")

    genes = list[Gene]()
    if gtf != "":
        print(f"Loading GTF {gtf}...")
        genes = list(files.parse_gtf(gtf, vcf.chromosomes))
        print(f"{len(genes)} genes in GTF file")

    if dna == "" and rna == "":
        raise ValueError("Need either RNA or DNA data to phase")
    elif not genes or rna == "":
        print("Running DNA/RNA phasing without DASE (no gene data provided)")
    elif PLOIDY != 2:
        raise ValueError('DASE-based phasing works only for diploid genomes')
    
    A = array[tuple[Graph, dict[int, Phase]]](len(vcf.chr_ordered))
    enumerate(vcf.chr_ordered) ||> parse_chromosome(vcf, dna, rna, genes, isoforms)
    # output.make_solution(vcf, [A[0]], out)
    output.make_solution(vcf, list(A, len(vcf.chr_ordered)), out)
    print(f'HapTree-X done--- the results can be found in {out}')

try:
    main(sys.argv[1:])
except ValueError as err:
    print(f'HapTree-X error: {err.message}')
    sys.exit(1)
