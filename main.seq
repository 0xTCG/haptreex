from common import V, DOT
from time import timing
import datagen
import joint
import rna
import graph
import alg
import stats
import output
import os
import sys
import random

print 'HapTree-X v1.0 [Seq]'
random.seed(51)

# parser = argparse.ArgumentParser(description="HapTree-X!")
# parser.add_argument(
#     "--RNAfragmat", metavar="filename", type=str, help="RNAfragmat", default=None
# )
# parser.add_argument(
#     "--DNAfragmat", metavar="filename", type=str, help="DNAfragmat", default=None
# )
# parser.add_argument(
#     "--isoforms", metavar="filename", type=str, help="Isoform file", default=None
# )
# parser.add_argument("--vcf", metavar="filename", type=str, help="VCF file")
# parser.add_argument(
#     "--outputfolder",
#     metavar="foldername",
#     type=str,
#     help="Output folder name",
#     default="HapTreeXResults",
# )
# parser.add_argument(
#     "--gene_info",
#     metavar="filename",
#     type=str,
#     help="Gene model file with GTF format",
#     default=None,
# )

# args = parser.parse_args()

vcf = sys.argv[1] #args.vcf
DNAfragmat = sys.argv[2] #sys.argv[2] # args.DNAfragmat
RNAfragmat = "" #sys.argv[2] # args.RNAfragmat
gene_data = "" #sys.argv[3] # args.gene_info
outputname = sys.argv[3] #args.outputfolder
isoforms = "" #sys.argv[6] # args.isoforms

if vcf == "":
   raise ValueError("Error: vcf required")

if RNAfragmat == "" and DNAfragmat == "":
    raise ValueError(
        "Error: at least one of RNAfragmat or DNAfragmat should be given. "
        + "You can use Chair tool to generate them from SAM files."
    )

RNAfragmats = [RNAfragmat]
DNAfragmats = [DNAfragmat]

# if not os.path.exists(outputname):
os.system(f"mkdir -p {outputname}")
pair_thresh = 0.7


def make_golden_from_true2(
    filename: str
) -> tuple[dict[int, dict[int, int]], list[str], list[str]]:
    f = open(filename, "r")
    a = f.readlines()
    f.close()
    i = 0
    while a[i][0] == "#":
        i += 1
    c = [x.split()[9][:3] for x in a[i:]]
    vChroms = [x.split()[0] for x in a[i:]]
    vPositions = [x.split()[1] for x in a[i:]]
    d = {0: dict[int, int](), 1: dict[int, int]()}
    for j in range(len(c)):
        if c[j][1] == "|":
            d[0][j] = int(c[j][0])
            d[1][j] = int(c[j][2])
        else:
            d[0][j] = DOT
            d[1][j] = DOT
    return d, vChroms, vPositions
vcfChroms, vcfPositions = list[str](), list[str]()
with timing(f"[0] Loading gold VCF {vcf}"):
    V, vcfChroms, vcfPositions = make_golden_from_true2(vcf)

with timing('Main'):
    if RNAfragmat == "" or gene_data == "":
        "Missing RNAfragmat, running phasing without DASE"
        if DNAfragmat == "":  # Only RNA data provided without gene info
            D = datagen.make_data_from_fragmat(RNAfragmats, vcf, 0.02)
            G = graph.Graph(D)
            GX = alg.RNA_phase(
                0.001, pair_thresh, 0.02, G.read_dict, G.comp_mins, G.components
            )
            output.make_solution(
                GX, G, outputname, "HapTreeX_noDASE_output.txt"
            )  # Running regular Haptree on 2-reads in the genome
        else:
            D: graph.Data = None
            with timing('[1] Making fragmat'):
                if RNAfragmat != "":
                    DNAfragmats = [DNAfragmat, RNAfragmat]
                D = datagen.make_data_from_fragmat(DNAfragmats, vcf, 0.02)
            G: graph.Graph = None
            with timing('[2] Making graph'):
                G = graph.Graph(D)
            with timing('[3] Phasing'):
                GX = alg.RNA_phase(
                    0.001, pair_thresh, 0.02, G.read_dict, G.comp_mins, G.components
                )
                output.make_solution(
                    GX, G, outputname, "HapTreeX_noDASE_output.txt"
                )  # Running regular Haptree on 2-reads in the genome
    else:
        RD: rna.RNAData = None
        with timing('[1] Making RNA fragmat'):
            RD = datagen.make_RNA_data_from_fragmat(gene_data, RNAfragmats, vcf, 0.02, isoforms)
        with timing('[2] Stats'):
            stats.stats(RD, 2, 0.2, 0.6, 0, 2, 0.001, 0.2)
        jG: joint.JointGraph = None
        with timing('[3] Graph'):
            D = None
            if DNAfragmat == "":
                D = rna.make_data_from_RNA_data(RD)
            else:
                D = datagen.make_data_from_fragmat(DNAfragmats, vcf, 0.02, RD.long_read_list)
            G = graph.Graph(D)
            jG = joint.JointGraph(RD, G)
        with timing('[4] Phasing'):
            jGX = alg.RNA_phase(
                0.001, pair_thresh, 0.02, jG.read_dict, jG.comp_mins, jG.components
            )
            output.make_solution_simple(
                jGX,
                outputname,
                "HapTreeX_withDASE_output.txt",
                vcfChroms,
                vcfPositions
            )  # Phasing using both 1-reads and 2-reads from DNAfragmat + RNAfragmat
