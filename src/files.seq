from bio.bam import *

from read import SNP, Read
from graph import Graph
from rna import Gene, RNAGraph
from time import timing, time
import os


TEMP_DIR = ''


def unlink(s):
    from C import unlink(cobj) -> int as _unlink
    _unlink(s.ptr)


class VCF:
    snps: List[SNP]
    line_to_snp: Dict[int, int]  # 1-based HapCUT-like SNP index
    chromosomes: Dict[str, Tuple[int, int]]  # Chromosome name to the SNP span
    chr_ordered: List[str]

    def __init__(self, path):
        """
        Parse a VCF file and return a dictionary of sorted SNPs:
            d := {chromosome_name: sorted([snp_1, snp_2])}
        and the corresponding line index
            {line_in_vcf: (chr, index in d[chr])}.
        Each snp_i is a SNP that is heterozygous in the sample
        (i.e. |set(GT(snp_i))| > 1).
        """

        self.snps, self.line_to_snp = [], {}
        self.chromosomes, self.chr_ordered = {}, []
        with open(path) as vcf:
            prev_chr, seen_snps = "", 0
            for line in vcf:
                if line[0] == '#':
                    continue
                seen_snps += 1
                chr, pos, id, ref, alt, _, _, _, fmt_, sample = line.split('\t')
                if len(ref) != 1:  # Ignore indels
                    continue
                fmt = dict(zip(fmt_.split(':'), sample.split(':')))
                gt = fmt['GT'].replace('|', '/').split('/')
                potential_alleles = [ref] + alt.split(',')
                # Get only alleles that are specified in GT field
                alleles = [
                    a
                    for i, a in enumerate(potential_alleles)
                    if str(i) in gt and len(a) == 1
                ]
                if len(alleles) > 1:  # Ignore homozygous SNPs
                    snp = SNP(len(self.snps), chr, int(pos) - 1, id, alleles)
                    if self.snps and snp < self.snps[-1]:  # TODO
                        raise ValueError(f'VCF is not sorted (SNP {snp})')
                    self.line_to_snp[seen_snps] = len(self.snps)
                    if chr not in self.chromosomes:
                        self.chr_ordered.append(chr)
                        if prev_chr:
                            self.chromosomes[prev_chr] = (
                                self.chromosomes[prev_chr][0], len(self.snps)
                            )
                        self.chromosomes[chr] = (len(self.snps), -1)
                        prev_chr = chr
                    self.snps.append(snp)
            if prev_chr:
                self.chromosomes[prev_chr] = (
                    self.chromosomes[prev_chr][0], len(self.snps)
                )

    def find_first(self, chr, pos):
        if chr not in self.chromosomes:
            return -1
        lo, hi = self.chromosomes[chr]
        while lo < hi:
            mid = (lo + hi) // 2
            if self.snps[mid].pos < pos:
                lo = mid + 1
            else:
                hi = mid
        return lo


def parse_read(vcf: VCF, fragment: Dict[int, Set[int]], record):
    ref, lo, hi, cigar, sequence, qual = record
    read = 0
    for sz, op in cigar:
        match op:
            case 'M' | '=' | 'X':
                while lo < hi:
                    snp = vcf.snps[lo]
                    if ref + sz <= snp.pos:
                        break
                    t = read + (snp.pos - ref)
                    if ref <= snp.pos:
                        al = snp.alleles.index(str(sequence[t]))
                        if al != -1 and ord(qual[t]) - 33 >= 10:
                            fragment.setdefault(lo, set()).add(al)
                    lo += 1
                read += sz
                ref += sz
            case 'I' | 'S': read += sz
            case 'D' | 'N': ref += sz
            case _: pass
    return fragment


def correct_fragment(
    fragment: Dict[int, Set[int]],
    cov: Dict[int, Set[int]], # @mutable
    reads: List[List[Tuple[int, int]]], # @mutable
    threshold
):
    if len(fragment) == 0:
        return
    count = len(fragment) - sum(1 for i in list(fragment) if len(fragment[i]) > 1)
    if count >= threshold:
        reads.append([])
        for pos, alleles in fragment.items():
            if len(alleles) == 1:
                al = alleles.pop()
                cov.setdefault(pos, set()).add(al)
                reads[-1].append((pos, al))


def parse_bam(
    vcf, sam_path, chr,
    cov: Dict[int, Set[int]], # @mutable
    reads: List[List[Tuple[int, int]]], # @mutable
    max_insert_size, threshold = 1
):
    parse = parse_read(vcf, ...)
    correct = correct_fragment(cov=cov, reads=reads, threshold=threshold, ...)
    seen = {}
    with BAM(sam_path, chr, copy=False) as sam:
        vlo, vhi = vcf.chromosomes[chr]
        tid = -1
        for c in sam.contigs():
            if c.name == chr:
                tid = c.tid
                break
        if tid == -1: return

        for line in sam:
            if line.tid != tid:
                break
            # Skip invalid reads
            if line.unmapped or line.secondary or line.duplicate \
                or line.supplementary or not len(line.cigar) : #or line.mapq < 10:
                continue

            # Find matching SNP range
            while vlo < vhi and vcf.snps[vlo].pos < line.pos:
                vlo += 1
            if vlo == vhi:
                break
            if line.pos + line.cigar.rlen < vcf.snps[vlo].pos:
                continue

            # FIX: in '#/' adds 15 secs to runtime; this part is still 7 secs :(
            name = line.query_name
            if len(name) > 2 and (name[-2] == '#' or name[-2] == '/'):
                name = name[:-2]

            if line.mate_unmapped or line.tid != line.mate_tid or line.insert_size > max_insert_size:
                correct(parse({}, (line.pos, vlo, vhi, line.cigar, line.read, line.qual)))
            elif name in seen: # Paired reads
                (parse({}, seen[name])
                    |> parse(..., (line.pos, vlo, vhi, line.cigar, line.read, line.qual))
                    |> correct)
                del seen[name]
            elif line.mate_pos < line.pos: # already seen but not added
                correct(parse({}, (line.pos, vlo, vhi, line.cigar, line.read, line.qual)))
            else:
                seen[copy(name)] = (line.pos, vlo, vhi, copy(line.cigar), copy(line.read), copy(line.qual))
        for _, read in seen.items():
            correct(parse({}, read))


def correct_fragment_10x(name, BX, XC, pos, fragment, threshold, fo):
    count = len(fragment) - sum(1 for i in list(fragment) if len(fragment[i]) > 1)
    if count >= threshold:
        fo.write(f'{BX} {XC} {pos} {name}')
        for pos, alleles in fragment.items():
            if len(alleles) == 1:
                fo.write(f' {pos} {alleles.pop()}')
        fo.write('\n')


def parse_bam_10x(
    vcf, sam_path, chr,
    cov: Dict[int, Set[int]], # @mutable
    reads: List[List[Tuple[int, int]]], # @mutable
    max_insert_size
):
    fo = open(f'{TEMP_DIR}/{chr}', 'w')
    parse = parse_read(vcf, ...)
    correct = correct_fragment_10x(threshold=1, fo=fo, ...)
    correct2 = correct_fragment(cov=cov, reads=reads, threshold=1, ...)

    seen, barcodes = {}, {}
    with BAM(sam_path, chr, copy=False) as sam:
        vlo, vhi = vcf.chromosomes[chr]
        tid = -1
        for c in sam.contigs():
            if c.name == chr:
                tid = c.tid
                break
        if tid == -1: return
        for line in sam:
            if line.tid != tid:
                break
            # Skip invalid reads
            if line.unmapped or line.secondary or line.duplicate \
                or line.supplementary or not len(line.cigar) or line.mapq < 20:
                continue

            # Find matching SNP range
            while vlo < vhi and vcf.snps[vlo].pos < line.pos:
                vlo += 1
            if vlo == vhi:
                break
            if line.pos + line.cigar.rlen < vcf.snps[vlo].pos:
                continue

            # OEAs
            name = line.query_name
            if len(name) > 2 and (name[-2] == '#' or name[-2] == '/'):
                name = name[:-2]
            BX = line.aux('BX').Z if line.aux('BX') else '*'
            XC = line.aux('XC').i if line.aux('XC') else \
                 (line.aux('MI').i if line.aux('MI') else -1)

            if line.mate_unmapped or line.tid != line.mate_tid or line.insert_size > max_insert_size:
                correct(
                    name, BX, XC, line.pos,
                    parse({}, (line.pos, vlo, vhi, line.cigar, line.read, line.qual))
                )
            elif name in seen:
                s = seen[name]
                (parse({}, s)
                    |> parse(..., (line.pos, vlo, vhi, line.cigar, line.read, line.qual))
                    |> correct(name, BX, XC, s[0], ...))
                del seen[name]
                del barcodes[name]
            elif line.mate_pos < line.pos: # already seen but not added
                correct(
                    name, BX, XC, line.pos,
                    parse({}, (line.pos, vlo, vhi, line.cigar, line.read, line.qual))
                )
            else:
                c = copy(name)
                seen[c] = (line.pos, vlo, vhi, copy(line.cigar), copy(line.read), copy(line.qual))
                barcodes[c] = (BX, XC)
        for name, read in seen.items():
            BX, XC = barcodes[name]
            correct(name, BX, XC, read[0], parse({}, read))
    fo.close()

    os.system(f'sort -k1,1 -k2,2n {TEMP_DIR}/{chr} -o {TEMP_DIR}/{chr}.sort')
    with timing(f'linking {chr}'), open(f'{TEMP_DIR}/{chr}.sort') as f:
        alleles = {}
        prev_bx, prev_xc, prev_pos = '*', -1, 0
        for l in f:
            lx = l.split(' ')
            bx, xc, pos = lx[0], int(lx[1]), int(lx[2])
            if bx == '*':
                for i in range(4, len(lx), 2):
                    alleles.setdefault(int(lx[i]), set()).add(int(lx[i+1]))
                correct2(alleles)
                alleles.clear()
            else:
                assert xc >= 0
                if bx != prev_bx:
                    correct2(alleles)
                    alleles.clear()
                    prev_bx = bx
                    prev_xc = xc
                elif xc != prev_xc:
                    correct2(alleles)
                    alleles.clear()
                    prev_xc = xc
                for i in range(4, len(lx), 2):
                    alleles.setdefault(int(lx[i]), set()).add(int(lx[i+1]))
                prev_pos = pos
        correct2(alleles)

    unlink(f'{TEMP_DIR}/{chr}')
    unlink(f'{TEMP_DIR}/{chr}.sort')


def parse_fragmat(vcf: VCF, fragmat: str, chr: str, cov: Dict[int, Set[int]], reads: List[List[Tuple[int, int]]], start: int = 5):
    print(f"Loading and formatting fragments...")
    with open(fragmat) as f:
        for r in f:
            frag = r.split()
            if not frag[0].isdigit():
                ValueError(f'{fragmat} is not valid fragmat file')
            name, qual = frag[1], frag[-1]
            # if len(frag) % 2 == 1:
                # raise ValueError(f"fragment file error: {frag}")
            # if len(qual) == 1 and ord(qual) < QUALITY_CUTOFF:  # TODO: bring back?
                # continue

            alleles = []
            for i in range(start, len(frag) - 1, 2):
                idx = int(frag[i])
                for allele in frag[i + 1]:
                    if idx not in vcf.line_to_snp:
                        print(f'Warning: Invalid SNP index {idx} for read {name}')
                        continue
                    snp = vcf.snps[vcf.line_to_snp[idx]]
                    if not 0 <= int(allele) < len(snp.alleles):
                        raise ValueError(f'Invalid allele {allele} for SNP {snp}')
                    cov.setdefault(snp.id, set()).add(int(allele))
                    alleles.append((snp.id, int(allele)))
                    idx += 1
            if alleles:
                reads.append(alleles)


def parse_phases(vcf, paths, r_chr, skip_single = True, is_tenx = False):
    reads = []
    for path, max_insert_size in paths:
        # print 'Reading', r_chr, is_tenx, path, max_insert_size
        start_len = len(reads)
        coverages = {}
        if is_tenx:
            parse_bam_10x(vcf, path, r_chr, coverages, reads, max_insert_size)
        else:
            # parse_fragmat(vcf, path, r_chr, coverages, reads, 2)
            parse_bam(vcf, path, r_chr, coverages, reads, max_insert_size)

        # Ensure that all reads have expressed SNPs
        for read_i in range(start_len, len(reads)):
            read = [i for i in reads[read_i] if i[0] in coverages]
            if len(read) and not (skip_single and len(read) <= 1):
                reads[read_i] = read
            else:
                reads[read_i].clear()

    read_counter = {}
    for r in reads:
        key = sorted(r)
        if len(key) <= int(skip_single):
            continue
        if key not in read_counter:
            read_counter[key] = 1
        else:
            read_counter[key] += 1
    return [
        Read({snp_id: snp_a for snp_id, snp_a in t[0]}, t[1], i)
        for i, t in enumerate(read_counter.items())
    ]


def load_rna_data(
    vcf: VCF,
    r_chr: str,
    genes: List[Gene],
    paths: List[str],
    isoforms_path: str,
    args: List[float]
):
    reads = parse_phases(vcf, [(p, 0x7FFFFFFF) for p in paths], r_chr, skip_single=False)
    if isoforms_path:
        print("Building IsoDict...")
        raise NotImplementedError("IsoDict")
        #isodict = build_isodict(isoforms_path)
        #genes = filter_transcripts(genes, isodict)

    # print('Building RNA graph...')
    rna = RNAGraph(vcf.snps, [g for g in genes if g.chr == r_chr], reads, args)
    return rna


def load_dna_data(
    vcf: VCF,
    r_chr: str,
    paths: List[Tuple[str, int]],
    ploidy: int = 2,
    rna_reads: Optional[List[Read]] = None,
    tenx: bool = False
):
    reads = parse_phases(vcf, paths, r_chr, skip_single=True, is_tenx=tenx)
    if rna_reads:
        reads += ~rna_reads
    for r in reads:
        r.special_snp = sorted(r.snps)[1]
        r.rates = [1.0/ploidy] * ploidy
    return Graph(reads, ploidy)


def load_aldy_data(path, ploidy = 2):
    snp_id : Dict[int, Tuple[int, List[str]]] = {}
    id_snp = {}
    reads = []
    with open(path) as f:
        for l in f:
            cols = l.strip().split(';')
            cov = int(cols[0])
            items = {}
            for c in cols[1:]:
                p = c.split(',')
                pos = int(p[0])
                if pos in snp_id:
                    if p[1] not in snp_id[pos][1]:
                        snp_id[pos][1].append(p[1])
                else:
                    id = len(snp_id)
                    snp_id[pos] = (id, [p[1]])
                    id_snp[id] = pos
                id = snp_id[pos][0]
                al = snp_id[pos][1].index(p[1])
                items[id] = al
            reads.append((items, cov))
    print('done')
    nreads = []
    for it, cov in reads:
        nit = {
            id: al
            for id, al in it.items()
            if len(snp_id[id_snp[id]][1]) > 1
        }
        if len(nit) > 1:
            nreads.append(Read(nit, cov, len(nreads)))
            nreads[-1].special_snp = sorted(nreads[-1].snps)[1]
            nreads[-1].rates = [1.0 / ploidy] * ploidy
    print('done')
    snps = [SNP(id, 'aldy', pos, '', alleles) for pos, (id, alleles) in snp_id.items()]
    vcf = VCF(snps, {}, {'aldy': (0, len(snps))}, ['aldy'])
    return vcf, Graph(nreads, ploidy)
