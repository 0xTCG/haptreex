from math import log
from bisect import bisect_left

from graph import build_components, Component
from read import Read, SNP
from rates import find_rates, score


DASE_ALL_READS = False

import time

class Gene:
    id: int  # index
    name: str  # a.k.a. transcript
    chr: str
    interval: tuple[int, int]
    sign: str
    exons: list[tuple[int, int]]  # List of (start, end)

    neighbors: set[int]
    snps: set[int]

    def __init__(
        self: Gene,
        id: int,
        name: str,
        chr: str,
        interval: tuple[int, int],
        sign: str,
        exons: list[tuple[int, int]],
    ):
        self.id = id
        self.name = name
        self.chr = chr
        self.interval = interval
        self.sign = sign
        self.exons = exons

        self.neighbors = set[int]()
        self.snps = set[int]()

    def __eq__(self: Gene, other: Gene):
        return self.name == other.name

    def set_snps(self: Gene, positions: list[tuple[int, int]]):
        h = bisect_left(positions, (self.interval[0], 0))
        if h == len(positions):
            return
        if not self.exons:
            return
        exon = 0
        self.snps = set[int]()
        for p in range(h, len(positions)):
            pos, snp = positions[p]
            pos += 1
            while exon < len(self.exons) and pos >= self.exons[exon][1]:
                exon += 1
            if pos >= self.interval[1] or exon >= len(self.exons):
                break
            if pos >= self.exons[exon][0]:
                if pos < self.exons[exon][1]:
                    self.snps.add(snp)
                else:
                    exon += 1

    def from_gtf(gtf_path: str, chroms: dict[str, tuple[int, int]]) -> Gene:
        b = [a.split("\t") for a in open(gtf_path, "r") if a[0] != '#']

        def parse_f(f):
            x, y = f.split(" ", 1)
            return x, y[1:-1] if y[0] == y[-1] == '"' else y

        gi, i = 0, 0
        while i < len(b):
            if b[i][2] == "transcript":
                chr, interval, sign = b[i][0], (int(b[i][3]) - 1, int(b[i][4])), b[i][6]
                if chr not in chroms:
                    i += 1
                    continue
                info = dict(parse_f(f.strip()) for f in b[i][8].split(";") if f.strip())
                name = info.get("gene_name", info["transcript_id"])
                i += 1
                exons = list[tuple[int, int]]()
                while i < len(b) and b[i][2] != "transcript":
                    if b[i][2] == "exon":
                        exon_start, exon_end = int(b[i][3]) - 1, int(b[i][4])
                        exons.append((exon_start, exon_end))
                    i += 1
                yield Gene(gi, name, chr, interval, sign, exons)
                gi += 1
            else:
                i += 1



class RNAGraph:
    genes: list[Gene]
    ploidy: int
    multi_reads: list[Read]
    counts: dict[int, list[int]]
    rates: dict[int, list[float]]

    components: dict[int, Component]  # {Component ID: Component}
    component_index: dict[int, int]  # SNP ID: Component ID
    snp_reads: dict[int, list[Read]]  # Reads for each SNP

    def __init__(
        self: RNAGraph,
        snps: list[SNP],
        genes: list[Gene],
        reads: list[Read],
        args: list[float]
    ):
        self.ploidy = 2
        self.multi_reads = [r for r in reads if len(r.snps) > 1]

        # print 'args',len(args)
        ( size_factor, rate_factor, rate_cutoff,
          coverage_cutoff, rate_dep_cutoff, cutoff, conf ) = args

        _t=time.time()
        # print 'in1', time.time()-_t
        # Initialize gene nodes
        # (1) Initialize gene SNPs
        phasable_positions = dict[str, list[tuple[int, int]]]()
        # Add `if len(r.snps) >= 1` to the set below to enable the original behaviour
        snp_candidates = {
            k for r in reads for k in r.snps 
            if DASE_ALL_READS or len(r.snps) == 1
        }
        for s in snp_candidates:
            snp = snps[s]
            l = phasable_positions.setdefault(snp.chr, list[tuple[int, int]]())
            l.append((snp.pos, snp.id))
        for p in phasable_positions.values():
            p.sort()
        for g in genes:
            if g.chr in phasable_positions:
                g.set_snps(phasable_positions[g.chr])

        # print 'in2', time.time()-_t
        # (2) Initialize gene neighbours (genes that share a common SNP)
        snp_to_genes = dict[int, set[int]]()  # SNP to gene
        for gi, g in enumerate(genes):
            for s in g.snps:
                snp_to_genes.setdefault(s, set[int]()).add(gi)
        for g in genes:
            for snp in g.snps:
                for n in snp_to_genes[snp]:
                    g.neighbors.add(n)

        # print 'in3', time.time()-_t
        # print len(genes)
        # Build gene components from genes that have at least one SNP
        gene_components, _ = build_components(
            dict((i, g) for i, g in enumerate(genes) if g.snps)
        )
        # print 'in3a', time.time()-_t
        snp_to_comp = {  # SNP -> genic component
            snp: root
            for root, comp in gene_components.items()
            for gene in comp.nodes
            for snp in genes[gene].snps
        }
        # self.final = self.dual_gene()  # Which types of genes to use?
        comp_to_snps = {m: list[int]() for m in gene_components}
        for s in snp_to_comp:
            comp_to_snps[snp_to_comp[s]].append(s)
        comp_snps = dict[int, list[int]]()  # root SNP -> list of SNPs in component
        for root, snps in comp_to_snps.items():
            if len(snps) > 1:
                snps.sort()
                comp_snps[snps[0]] = sorted(snps)
        
        # print 'in4', time.time()-_t
        # Only use reads that fall strictly within a gene
        comp_to_reads = {root: list[Read]() for root in gene_components}
        NOTSEEN = -1  # NOTSEEN span non-exonic regions
        OVERSEEN = -2  # OVERSEEN typically span exonic and intronic regions
        comp_to_reads[OVERSEEN], comp_to_reads[NOTSEEN] = list[Read](), list[Read]()
        for read in reads:
            comps = {snp_to_comp.get(snp, NOTSEEN) for snp in read.snps}
            # comps -= {NOTSEEN}  # Uncomment to allow reads with partial exonic span
            comp = comps.pop() if len(comps) == 1 else OVERSEEN
            assert comp in comp_to_reads
            comp_to_reads[comp].append(read)
        self.snp_reads = dict[int, list[Read]]()  # SNP -> 1-reads in a component
        for root in comp_snps:
            for read in comp_to_reads[snp_to_comp[root]]:
                if len(read.snps) == 1:
                    snp = list(read.snps.keys())[0]
                    self.snp_reads.setdefault(snp, list[Read]()).append(read)
                else:
                    for snp in read.snps:
                        self.snp_reads.setdefault(snp, list[Read]()).append(
                            Read({snp: read.snps[snp]}, read.count, -1)
                        )
        for root, snps in comp_snps.items():
            # Ignore SNPs that are not expressed by reads that survived till here
            comp_snps[root] = [s for s in snps if s in self.snp_reads]
            # print(f'SNP {snp} not expressed in reads!')
        comp_snps = {root: snps for root, snps in comp_snps.items() if snps}

        # print 'in5', time.time()-_t
        # Calculate counts and LL for filtering
        self.counts = dict[int, list[int]]()
        for snp in self.snp_reads:
            self.counts[snp] = [0, 0]
            for read in self.snp_reads[snp]:
                self.counts[snp][read.snps[snp] % 2] += read.count
        LL = {s: score(self.counts[s]) for ss in comp_snps.values() for s in ss}

        # print 'in6', time.time()-_t
        # Assign DASE rates
        self.rates = dict[int, list[float]]()
        for snps in comp_snps.values():
            reads = [read for snp in snps for read in self.snp_reads[snp]]
            rate = find_rates(snps, reads, 0.6)  # Choose adjacent snp rate
            for snp in snps:
                self.rates[snp] = rate
            for read in reads:
                read.rates = rate

        # print 'in7', time.time()-_t
        def num(ss):
            return len(ss), sum(len(s) for _, s in ss.items())

        # Apply filters
        # print(f"[start] size: {num(comp_snps)}")

        comp_snps = self.rate_filter(comp_snps, rate_cutoff)
        # print(f"[rate] size: {num(comp_snps)}")
        comp_snps = self.coverage_filter(comp_snps, int(coverage_cutoff))
        # print(f"[coverage] size: {num(comp_snps)}")
        comp_snps = self.size_cluster_filter(comp_snps, int(size_factor))
        # print(f"[size_cluster] size: {num(comp_snps)}")
        comp_snps = self.rate_dependent_filter(comp_snps, int(rate_dep_cutoff), conf)
        # print(f"[rate_dependent] size: {num(comp_snps)}")
        comp_snps = self.cutoff_filter(comp_snps, LL, cutoff)
        # print(f"[cutoff] size: {num(comp_snps)}")
        comp_snps = self.rate_cluster_filter(comp_snps, rate_factor)
        # print(f"[rate_cluster] size: {num(comp_snps)}")

        # Make SNP connected components
        self.components, self.component_index = dict[int, Component](), dict[int, int]()
        for root, snps in comp_snps.items():
            if len(snps) > 1:
                self.components[root] = Component(root, snps, list[Read]())
                for snp in snps:
                    self.component_index[snp] = root

    def rate_filter(self: RNAGraph, snps: dict[int, list[int]], rate_cutoff: float):
        # High-confidence SNPs
        return {r: s for r, s in snps.items() if self.rates[r] and max(self.rates[r]) >= rate_cutoff}

    def coverage_filter(self: RNAGraph, snps: dict[int, list[int]], coverage_cutoff: int):
        new = dict[int, list[int]]()
        for r in snps:
            covered_snps = sorted([
                snp for snp in snps[r] if sum(self.counts[snp]) > coverage_cutoff
            ])
            if len(covered_snps) > 1:
                new[covered_snps[0]] = covered_snps
        return new

    def size_cluster_filter(self: RNAGraph, snps: dict[int, list[int]], size_factor: int):
        return {
            min(cluster): sorted(cluster)
            for r in snps
            for cluster in self.clusters_size(snps[r], size_factor)
            if cluster
        }

    def rate_dependent_filter(self: RNAGraph, snps: dict[int, list[int]], cutoff: int, conf: float):
        new = dict[int, list[int]]()
        for r in snps:
            confident_snps = sorted([
                snp for snp in snps[r]
                if self.new_score(snp, conf) > cutoff
            ])
            if len(confident_snps) > 1:
                new[confident_snps[0]] = confident_snps
        return new

    def cutoff_filter(self: RNAGraph, snps: dict[int, list[int]], LL: dict[int, float], cutoff: float):
        new = dict[int, list[int]]()
        for r in snps:
            confident_snps = sorted([
                snp for snp in snps[r] if LL[snp] < cutoff
            ])
            if len(confident_snps) > 1:
                new[confident_snps[0]] = confident_snps
        return new

    def rate_cluster_filter(self: RNAGraph, snps: dict[int, list[int]], rate_factor: float):
        return {
            min(cluster): sorted(cluster)
            for r in snps
            for cluster in self.clusters_rate(snps[r], rate_factor)
            if cluster
        }

    def clusters_size(self: RNAGraph, snps: list[int], sum_factor: int):
        def sort_key(a: tuple[int, float]) -> float:
            return a[1]
        tmp = {s: float(sum(self.counts[s])) for s in snps}
        order = sorted(tmp.items(), key=sort_key)

        clusters = [[order[0][0]]]
        for j in range(len(order) - 1):
            s0 = order[j][0]
            s1 = order[j + 1][0]
            if tmp[s1] < sum_factor * tmp[s0]:
                clusters[-1].append(s1)
            else:
                clusters.append([s1])
        return clusters

    def clusters_rate(self: RNAGraph, snps: list[int], rate_factor: float):
        def sort_key(a: tuple[int, float]) -> float:
            return a[1]
        tmp = {
            s: max(self.counts[s]) / float(sum(self.counts[s])) - 0.5 
            for s in snps if self.counts[s]
        }
        order = sorted(tmp.items(), key=sort_key)

        clusters = [[order[0][0]]]
        for j in range(len(order) - 1):
            s0 = order[j][0]
            s1 = order[j + 1][0]
            if tmp[s1] < rate_factor + tmp[s0]:
                clusters[-1].append(s1)
            else:
                clusters.append([s1])
        return clusters

    def new_score(self: RNAGraph, snp: int, conf: float):
        pair = self.counts[snp]
        rates = self.rates[snp]
        r = conf * max(min(rates), 0.05) + 0.5 * (1 - conf)
        k, n = min(pair), sum(pair)
        return max(-(n - 2 * k) * log(r / (1 - r)), log(2.0))
