
from read import Read
from files import VCF
from alg import Phase
from graph import Graph
from threading import Lock


def mec_score(ploidy: int, reads: List[Read], phase: Phase):
    """
    Computes a phase MEC score of a connected component.
    """
    return sum(
        min(
            sum(1 for snp in read.snps if phase.haplotypes[hap][snp] != read.snps[snp])
            for hap in range(ploidy)
        )
        for read in reads
    )


def make_solution(Gp: Tuple[Optional[Graph], Dict[int, Phase]], V: VCF, f: File, lock: Lock):
    G, phases = Gp
    with lock:
        for root in sorted(G.components.keys()):
            if root not in phases: continue
            comp = G.components[root]
            span = V.snps[comp.nodes[-1]].pos - V.snps[comp.nodes[0]].pos
            reads = sum(len(x) for x in comp.reads)
            print(
                f"BLOCK Start: {root + 1} Len: {len(comp.nodes)} Span: {span} Reads: {reads}",
                file=f
            )
            haps = sorted([(h[root], i) for i, h in enumerate(phases[root].haplotypes)])
            for snp in comp.nodes:
                print(snp + 1, file=f, end='\t')
                for _, hap in haps:
                    print(phases[root].haplotypes[hap][snp], file=f, end='\t')
                print(V.snps[snp].chr, V.snps[snp].pos + 1, file=f, sep='\t')
            print("*****", file=f)
