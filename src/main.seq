import random
import sys
from getopt import GetoptError, getopt

import read
import files
import graph
import alg
import output
import rna
import threading
from rna import Gene
from graph import Graph
from alg import Phase, MAX_PHASES

from files import TEMP_DIR
from time import timing, time
from threading import Lock

DASE_ONLY = False
PLOIDY = 2

def mkdtemp(template: str) -> str:
    cimport mkdtemp(t: cobj) -> cobj
    t = mkdtemp(template.c_str())
    if t:
        return str.from_ptr(t)
    else:
        raise OSError("mkdtemp failed")

extend list[T]:
    def lock_append(self: list[T], it: T, lock: Lock):
        with lock:
            self.append(it)

# Better
PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR, RNA_PARAMS = \
    0.001, 0.8, 0.01, [2.0, 0.2, 0.7, 0.0, 2.0, 0.001, 0.2]

def parse_args(argv: list[str]):
    global PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR, PLOIDY
    try:
        opts, args = getopt(
            argv,
            "hv:d:r:g:i:o:dp:z:",
            [
                "help",
                "vcf=",
                "dna=",
                "rna=",
                "gene=",
                "isoform=",
                "out=",
                "only-dase",
                "ploidy",
                "phase-threshold",
                "pair-threshold",
                "phase-error",
                "z=",
                "10x"
            ]
        )
        vcf, dna, rna, gene, isoforms, output, tenx = "", "", "", "", "", "", False
        for o, a in opts:
            if o in ["-h", "--help"]: sys.exit(0)
            elif o in ['-v', '--vcf']: vcf = a
            elif o in ['-d', '--dna']: dna = a
            elif o in ['-r', '--rna']: rna = a
            elif o in ['-g', '--gene']: gene = a
            elif o in ['-i', '--isoform']: isoforms = a
            elif o in ['-z', '--z']: Z = a
            elif o in ['-o', '--out']: output = a
            elif o in ['-d', '--only-dase']: DASE_ONLY = True
            elif o in ['-p', '--ploidy']: PLOIDY = int(a)
            elif o in ['--10x']: tenx = True
            elif o == "--phase-threshold": PHASE_THRESHOLD = float(a)
            elif o == "--pair-threshold": PAIR_THRESHOLD = float(a)
            elif o == "--phase-error": PHASE_ERROR = float(a)
            else: assert False, f"unhandled option {o}"
        return vcf, dna, rna, gene, output, isoforms, tenx
    except GetoptError as err:
        raise ValueError(err.message)

def parse_chromosome(chr, vcf, dna, rna, genes, isoforms, tenx) -> tuple[Graph, dict[int, Phase]]:
    with timing(f'Reading {chr}'):
        g: graph.Graph = None
        if not genes or rna == "":
            dnas = list[tuple[str, int]]()
            if dna: dnas.append((dna, 1000))
            if rna: dnas.append((rna, 0x7FFFFFFF))
            g = files.load_dna_data(vcf, chr, dnas, PLOIDY, tenx=tenx)
        else:
            r = files.load_rna_data(vcf, chr, genes, [rna], isoforms, RNA_PARAMS)
            if not dna:
                g = graph.Graph(r.multi_reads if not DASE_ONLY else list[read.Read](), r.ploidy)
            else:
                g = files.load_dna_data(vcf, chr, [(dna, 1000)], PLOIDY, r.multi_reads, tenx)
            g.integrate_rna(r)
        with timing('phase'):
            phases = alg.phase(g, PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR)
            return g, phases

def main(argv: list[str]):
    global TEMP_DIR, MAX_PHASES
    print('HapTree-X v2.0')
    random.seed(51)

    vcf_path, dna, rna, gtf, out, isoforms, tenx = parse_args(argv)

    print(f'Ploidy: {PLOIDY}')
    print(f"Loading VCF file {vcf_path}...")
    if not vcf_path:
        raise ValueError("Error: VCF file required")
    if not out:
        raise ValueError("Error: output file required")
    vcf = files.VCF(vcf_path)
    print(f"{len(vcf.snps)} SNPs in VCF file")

    genes = list[Gene]()
    if gtf != "":
        print(f"Loading GTF {gtf}...")
        genes = list(Gene.from_gtf(gtf, vcf.chromosomes))
        print(f"{len(genes)} genes in GTF file")

    if dna == "" and rna == "":
        raise ValueError("Need either RNA or DNA data to phase")
    elif not genes or rna == "":
        print("Running DNA/RNA phasing without DASE (no gene data provided)")
    elif PLOIDY != 2:
        raise ValueError('DASE-based phasing works only for diploid genomes')

    lock = threading.Lock()
    if tenx:
        TEMP_DIR = mkdtemp("./htx-tmp-XXXXXX")
        MAX_PHASES = 20
        PHASE_THRESHOLD, PAIR_THRESHOLD, PHASE_ERROR= 0.001, 0.7, 0.03
    with open(out, "w") as f:
        ( iter(vcf.chr_ordered)
            ||> parse_chromosome(vcf, dna, rna, genes, isoforms, tenx)
            |> output.make_solution(vcf, f, lock) )
    print(f'HapTree-X done--- the results can be found in {out}')

try:
    main(sys.argv[1:])
except ValueError as err:
    print(f'HapTree-X error: {err.message}')
    sys.exit(1)
